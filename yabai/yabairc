#!/usr/bin/env sh

# the scripting-addition must be loaded manually if
# you are running yabai on macOS Big Sur. Uncomment
# the following line to have the injection performed
# when the config is executed during startup.
#
# for this to work you must configure sudo such that
# it will be able to run the command without password
#
# see this wiki page for information:
#  - https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release)
#
# sudo yabai --load-sa
# yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"

pkill -x yb
yb &

yabai -m signal --add event=window_created action="echo \"create \$YABAI_WINDOW_ID\" | nc -U /tmp/yb_$USER.socket"
yabai -m signal --add event=window_destroyed action="echo \"destroy \$YABAI_WINDOW_ID\" | nc -U /tmp/yb_$USER.socket"
yabai -m signal --add event=space_changed action="echo \"query\" | nc -U /tmp/yb_$USER.socket"
yabai -m signal --add event=display_changed action="echo \"query\" | nc -U /tmp/yb_$USER.socket"
yabai -m signal --add event=mission_control_enter action="echo \"mission_control_enter\" | nc -U /tmp/yb_$USER.socket"
yabai -m signal --add event=mission_control_exit action="echo \"mission_control_exit\" | nc -U /tmp/yb_$USER.socket"

sudo yabai --load-sa
yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"

# Rules
yabai -m rule --add app="^System Preferences$" manage=off
yabai -m rule --add app="^Pika$" manage=off
yabai -m rule --add app="^Grammarly Desktop$" manage=off
yabai -m rule --add app="^Системные настройки$" manage=off
yabai -m rule --add app="^System Settings$" manage=off
yabai -m rule --add app="^Authy Desktop$" manage=off
yabai -m rule --add app="^Dynamic Wallpapper$" manage=off
yabai -m rule --add app="^Kap$" manage=off
yabai -m rule --add app="^Xnip$" manage=off
yabai -m rule --add app="^Hearthstone$" manage=off
yabai -m rule --add app="^Finder$" manage=off
yabai -m rule --add app="^Spotify$" manage=off
yabai -m rule --add app="^Flameshot$" manage=off
yabai -m rule --add app="^zoom.us$" manage=off
yabai -m rule --add app="^Android Emulator.*" manage=off
yabai -m rule --add app="^qemu-system-aarch64" manage=off
yabai -m rule --add app="^OpenVPN Connect$" manage=off

# yabai -m rule --add app="^World of Warcraft$" manage=off
# yabai -m rule --add app="^World*" manage=off
yabai -m rule --add app="^Emacs*" manage=on space=dev
yabai -m rule --add app=Firefox manage=on space=browser
# yabai -m rule --add app=Telegram manage=on space=social
yabai -m rule --add app=Ferdi manage=on space=social
yabai -m rule --add app=kitty manage=on space=other
yabai -m rule --add app=Emacs manage=on space=dev
yabai -m rule --add app=Skype manage=on space=social
yabai -m rule --add app=Slack manage=on space=social

# yabai -m rule --add app="^Doom Emacs$" manage=off
# yabai -m rule --add app="^Emacs$" manage=off


# global settings
yabai -m config mouse_follows_focus          on
yabai -m config focus_follows_mouse          off
yabai -m config window_placement             second_child
yabai -m config window_topmost               off
yabai -m config window_shadow                off
yabai -m config window_opacity               off
# yabai -m config window_opacity_duration      0.0
yabai -m config active_window_opacity        0.95
yabai -m config normal_window_opacity       0.85
yabai -m config window_border_width          2
yabai -m config split_ratio                  0.50
yabai -m config auto_balance                 off
yabai -m config mouse_modifier               fn
yabai -m config mouse_action1                move
yabai -m config mouse_action2                resize
yabai -m config mouse_drop_action            swap
yabai -m config window_border                off
# yabai -m config window_border                on
# general space settings
yabai -m config layout                       bsp
yabai -m config top_padding                  16
yabai -m config bottom_padding               10
yabai -m config left_padding                 10
yabai -m config right_padding                10
yabai -m config window_gap                   10

# Space names
yabai -m space 1 --label social
yabai -m space 2 --label debug
yabai -m space 3 --label entertiment

yabai -m space 4 --label dev
yabai -m space 5 --label www 
yabai -m space 6 --label other
yabai -m space 7 --label thrash




# Spacebar
# # Refresh spaces widget on space change
# yabai -m signal --add event=space_changed action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-spaces-jsx\"'"
# # Refresh spaces widget on display focus change
# yabai -m signal --add event=display_changed action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-spaces-jsx\"'"
# # Refresh spaces widget on window resize
# yabai -m signal --add event=window_resized action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-spaces-jsx\"'"
# # Refresh process widget on space change
# yabai -m signal --add event=space_changed action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-process-jsx\"'"

# # Refresh process widget on when focused application changes
# yabai -m signal --add event=window_focused action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-process-sx\"'"
# # Refresh spaces widget on when focused application changes
# yabai -m signal --add event=window_focused action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-spaces-jsx\"'"

# # Refresh process widget on when focused application changes
# yabai -m signal --add event=application_front_switched action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-process-jsx\"'"
# # Refresh spaces widget on when focused application changes
# yabai -m signal --add event=application_front_switched action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-spaces-jsx\"'"

# # Refresh process widget on when an application window is closed
# yabai -m signal --add event=window_destroyed action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-process-jsx\"'"
# # Refresh spaces widget on when an application window is closed
# yabai -m signal --add event=window_destroyed action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-spaces-jsx\"'"

# Refresh process widget when current window title changes
# yabai -m signal --add event=window_title_changed action="osascript -e 'tell application id \"tracesOf.Uebersicht\" to refresh widget id \"simple-bar-process-jsx\"'"

yabai -m config active_window_border_color   0xff4faaea
yabai -m config normal_window_border_color   0xff0e4b77
yabai -m config insert_feedback_color        0xffd75f5f

# Stackline
# STACKLINE_EVENTS="\
#     application_activated \
#     application_front_switched \
#     application_hidden \
#     application_launched \
#     application_terminated \
#     application_visible \
#     window_created \
#     window_deminimized \
#     window_focused \
#     window_minimized \
#     window_resized"

# yabai -m signal --add \
#     event="window_destroyed" \
#     label="stackline_window_destroyed" \
#     action="echo ':window_destroyed' | /usr/local/bin/hs -m stackline-events"

# for event in $STACKLINE_EVENTS
# do
#     yabai -m signal --add \
#         event="$event" \
#         label="stackline_$event" \
#         app!="Hammerspoon" \
#         action="echo ':$event' | /usr/local/bin/hs -m stackline-events"
# done
echo "yabai configuration loaded.."




# WAL
source ~/.cache/wal/colors.sh # pywal scheme - update if needed

# yabai template colours
CBACK=$(echo $background | sed 's/#//')
CFORE=$(echo $foreground | sed 's/#//')
CACTV=$(echo $color3 | sed 's/#//')
CNORM=$(echo $color1 | sed 's/#//')
CINSE=$(echo $foreground | sed 's/#//')

yabai -m config status_bar                   on
# yabai -m config status_bar_background_color  0xff$CBACK
# yabai -m config status_bar_foreground_color  0xff$CFORE

# yabai -m config window_border                on
# yabai -m config window_border_width          4
# yabai -m config active_window_border_color   0xff$CACTV
# yabai -m config normal_window_border_color   0xff$CNORM
# yabai -m config insert_window_border_color   0xff$CINSE

# Events for sketchybar
yabai -m signal --add event=window_focused action="sketchybar --trigger window_focus"
yabai -m signal --add event=window_created action="sketchybar --trigger windows_on_spaces"
yabai -m signal --add event=window_destroyed action="sketchybar --trigger windows_on_spaces"
