theme = "my_light"


[editor]
line-number = "relative"
gutters = ["diagnostics", "spacer", "line-numbers", "diff"]
mouse = true
middle-click-paste = true
scroll-lines = 3
shell = ["/usr/bin/env", "fish", "-c"]
text-width = 80
workspace-lsp-roots = [
  ".git",
  ".hg",
  "Cargo.toml",
  "package.json",
  "go.mod",
  "angular.json",
  "nx.json",
  "pnpm-workspace.yaml"
]
preview-completion-insert = true
completion-trigger-len = 2
auto-completion = true
auto-format = true
auto-save = false
idle-timeout = 400
completion-timeout = 250
clipboard-provider = "pasteboard"

# Indentation settings (adapted from NeoVim: tabstop=2, shiftwidth=2, expandtab)
[editor.indent-guides]
render = true
character = "╎"
skip-levels = 1

[editor.statusline]
left = ["mode", "spinner", "file-name", "file-modification-indicator"]
center = []
right = ["diagnostics", "selections", "register", "position", "file-encoding"]

[editor.lsp]
enable = true
display-messages = true
auto-signature-help = true
display-inlay-hints = true
display-signature-help-docs = true
snippets = true
goto-reference-include-declaration = true

[editor.cursor-shape]
insert = "bar"
normal = "block"
select = "underline"

[editor.file-picker]
hidden = false
follow-symlinks = true
deduplicate-links = true
parents = true
ignore = true
git-ignore = true
git-global = true
git-exclude = true

[editor.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'`' = '`'
'<' = '>'

[editor.search]
smart-case = true
wrap-around = true

[editor.whitespace]
render = "all"

[editor.whitespace.characters]
space = "·"
nbsp = "⍽"
tab = "→"
newline = "⏎"

[editor.soft-wrap]
enable = false

[keys.normal]
X = ["extend_line_up", "extend_to_line_bounds"]
"C-." = "rotate_view"

"C-j" = "goto_next_diag"
"C-k" = "goto_prev_diag"

C-a = [":sh unibear add_file %%{buffer_name}"]

"C-s" = ":write"

"S-h" = "swap_view_left"
"S-l" = "swap_view_right" 
"S-j" = "swap_view_down"
"S-k" = "swap_view_up"

"K" = "hover"

"F12" = [":new", ":insert-output $SHELL", ":buffer-close!", ":redraw"]

y = "yank_to_clipboard"
Y = "yank"  

[keys.normal.g]
"d" = "goto_definition"
"r" = "goto_reference"
"i" = "goto_implementation"
"t" = "goto_type_definition"
"w" = "goto_word"

[keys.normal.space]
"." = [
  ':sh rm -f /tmp/yazi-path',
  ':insert-output yazi %{buffer_name} --chooser-file=/tmp/yazi-path',
  ":open %sh{cat /tmp/yazi-path}",
  ":redraw",
  ":reload-all",
  ':set mouse false',
  ':set mouse true'
]
"y" = "yank_to_clipboard"
"p" = "paste_clipboard_after"

"q" = ":buffer-close"

"Q" = ":quit-all"

"/" = "toggle_comments"

"e" = "file_explorer"

[keys.normal.space.b]
"]" = "goto_next_buffer"
"[" = "goto_previous_buffer" 
"q" = ":buffer-close"

[keys.normal.space.h.r]
"e" = ":config-reload"

[keys.normal.space.w]
"v" = "vsplit"
"s" = "hsplit"

[keys.normal.space.m.e]
"b" = ":sh luafile %%"

[keys.normal.space.f]
"f" = "file_picker"
"g" = "global_search"
"b" = "buffer_picker"
"s" = "workspace_symbol_picker"
"e" = "file_explorer"
"r" = [
    ":write-all",
    ":insert-output scooter >/dev/tty",
    ":redraw",
    ":reload-all"
]
"d" = [
  ':sh rm -f /tmp/yazi-path',
  ':insert-output yazi %{buffer_name} --chooser-file=/tmp/yazi-path',
  ":open %sh{cat /tmp/yazi-path}",
  ":redraw",
  ":reload-all",
  ':set mouse false',
  ':set mouse true'
]

[keys.normal.space.g]
"g" = [
    ":write-all",
    ":insert-output gitu >/dev/tty",
    ":redraw",
    ":reload-all"
]
"G" = [
    ":write-all",
    ":insert-output lazygit >/dev/tty",
    ":redraw",
    ":reload-all"
]
"u" = [
    ":write-all", 
    ":new", 
    ":insert-output gitui >/dev/tty", 
    ":set mouse false", 
    ":set mouse true",
    ":buffer-close!", 
    ":redraw", 
    ":reload-all"
]
"s" = [":new", ":insert-output git status", ":buffer-close!", ":redraw"]
"l" = [":new", ":insert-output git log --oneline -10", ":buffer-close!", ":redraw"]
"d" = [":new", ":insert-output git diff", ":buffer-close!", ":redraw"]

# Copy commands: n = copy filename, p = copy full path
[keys.normal.space.c]
"a" = "code_action"
"r" = "rename_symbol"
"f" = "format_selections"
"n" = [":sh basename %{buffer_name} | tr -d '\\n' | pbcopy"]  # copy filename
"p" = [":sh echo -n %{buffer_name} | pbcopy"]                # copy full path

[keys.insert]
"C-s" = ["normal_mode", ":write"]

"C-." = ["normal_mode", "rotate_view"]

"C-g" = [
    ":write-all", 
    ":new", 
    ":insert-output gitui >/dev/tty", 
    ":set mouse false", 
    ":set mouse true",
    ":buffer-close!", 
    ":redraw", 
    ":reload-all"
]

[keys.select]
"/" = "toggle_comments"


