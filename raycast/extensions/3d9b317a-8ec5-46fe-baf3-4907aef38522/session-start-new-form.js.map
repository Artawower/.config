{
  "version": 3,
  "sources": ["../src/session-start-new-form.tsx", "../src/checkInstall.tsx"],
  "sourcesContent": ["import { open, closeMainWindow, showHUD, ActionPanel, Form, Action, getPreferenceValues } from \"@raycast/api\";\nimport { SessionInstallationCheck } from \"./checkInstall\";\n\nconst submitSession = async (values: { intent: string; duration: string; notes: string; category: string }) => {\n  if (await SessionInstallationCheck()) {\n    // https://www.stayinsession.com/learn/session-url-scheme\n    const urlScheme = \"session:///start\";\n    const paramsArray = [\n      `intent=${values.intent}` ?? null,\n      `duration=${values.duration}` ?? null,\n      `notes=${values.notes}` ?? null,\n      `categoryName=${values.category}` ?? null,\n    ];\n    const queryString = paramsArray.join(\"&\");\n    const url = `${urlScheme}?${queryString}`;\n    open(url);\n    await closeMainWindow();\n    await showHUD(\"New session started \u23F2\uFE0F\");\n  }\n};\n\nexport default function Command() {\n  const preferences = getPreferenceValues();\n\n  const CategoryField = () => {\n    if (preferences.categoryList) {\n      let categoryListParsed = preferences.categoryList.split(\";\");\n      categoryListParsed = categoryListParsed.filter((d: string) => d.trim() !== \"\");\n      return (\n        <Form.Dropdown id=\"category\" title=\"Category\">\n          {categoryListParsed.map((category: string) => (\n            <Form.Dropdown.Item value={category} title={category} />\n          ))}\n        </Form.Dropdown>\n      );\n    } else {\n      return (\n        <Form.Description\n          title=\"Category\"\n          text=\"No category list configured. Please create a semi-colon separated list of categories to choose from in command preferences.\"\n        />\n      );\n    }\n  };\n\n  return (\n    <Form\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm title=\"Start Session\" onSubmit={submitSession} />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField id=\"intent\" title=\"Intent\" autoFocus />\n      <CategoryField />\n      <Form.TextField id=\"duration\" title=\"Duration (Minutes)\" placeholder=\"Leave blank for default value\" />\n      <Form.TextArea id=\"notes\" title=\"Notes\" />\n    </Form>\n  );\n}\n", "import { getApplications, showToast, Toast, open, popToRoot, showHUD } from \"@raycast/api\";\n\nasync function isSessionInstalled() {\n  const applications = await getApplications();\n  let userApplications: typeof applications = [];\n\n  try {\n    userApplications = await getApplications(\"~/Applications\");\n  } catch (error) {\n    // If there's an error getting user applications, we'll just continue with an empty array\n    // console.error(\"Error getting user applications:\", error);\n  }\n\n  const bundleIds = [\"com.philipyoungg.session-setapp\", \"com.philipyoungg.session\", \"com.philipyoungg.session-direct\"];\n\n  return (\n    applications.some(({ bundleId }) => bundleId && bundleIds.includes(bundleId)) ||\n    userApplications.some(({ bundleId }) => bundleId && bundleIds.includes(bundleId))\n  );\n}\n\nexport async function SessionInstallationCheck() {\n  if (!(await isSessionInstalled())) {\n    const options: Toast.Options = {\n      style: Toast.Style.Failure,\n      title: \"Session is not installed\",\n      message: \"Read more here\",\n      primaryAction: {\n        title: \"Download information\",\n        onAction: (toast) => {\n          open(\"https://www.stayinsession.com\");\n          toast.hide();\n        },\n      },\n    };\n\n    await showToast(options);\n    return false;\n  }\n\n  return true;\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAA+F,wBCA/F,IAAAC,EAA4E,wBAE5E,eAAeC,GAAqB,CAClC,IAAMC,EAAe,QAAM,mBAAgB,EACvCC,EAAwC,CAAC,EAE7C,GAAI,CACFA,EAAmB,QAAM,mBAAgB,gBAAgB,CAC3D,MAAgB,CAGhB,CAEA,IAAMC,EAAY,CAAC,kCAAmC,2BAA4B,iCAAiC,EAEnH,OACEF,EAAa,KAAK,CAAC,CAAE,SAAAG,CAAS,IAAMA,GAAYD,EAAU,SAASC,CAAQ,CAAC,GAC5EF,EAAiB,KAAK,CAAC,CAAE,SAAAE,CAAS,IAAMA,GAAYD,EAAU,SAASC,CAAQ,CAAC,CAEpF,CAEA,eAAsBC,GAA2B,CAC/C,GAAI,CAAE,MAAML,EAAmB,EAAI,CACjC,IAAMM,EAAyB,CAC7B,MAAO,QAAM,MAAM,QACnB,MAAO,2BACP,QAAS,iBACT,cAAe,CACb,MAAO,uBACP,SAAWC,GAAU,IACnB,QAAK,+BAA+B,EACpCA,EAAM,KAAK,CACb,CACF,CACF,EAEA,eAAM,aAAUD,CAAO,EAChB,EACT,CAEA,MAAO,EACT,CDVY,IAAAE,EAAA,6BA5BNC,EAAgB,MAAOC,GAAkF,CAC7G,GAAI,MAAMC,EAAyB,EAAG,CAEpC,IAAMC,EAAY,mBAOZC,EANc,CAClB,UAAUH,EAAO,MAAM,IAAM,KAC7B,YAAYA,EAAO,QAAQ,IAAM,KACjC,SAASA,EAAO,KAAK,IAAM,KAC3B,gBAAgBA,EAAO,QAAQ,IAAM,IACvC,EACgC,KAAK,GAAG,EAClCI,EAAM,GAAGF,CAAS,IAAIC,CAAW,MACvC,QAAKC,CAAG,EACR,QAAM,mBAAgB,EACtB,QAAM,WAAQ,kCAAwB,CACxC,CACF,EAEe,SAARC,GAA2B,CAChC,IAAMC,KAAc,uBAAoB,EAElCC,EAAgB,IAAM,CAC1B,GAAID,EAAY,aAAc,CAC5B,IAAIE,EAAqBF,EAAY,aAAa,MAAM,GAAG,EAC3D,OAAAE,EAAqBA,EAAmB,OAAQC,GAAcA,EAAE,KAAK,IAAM,EAAE,KAE3E,OAAC,OAAK,SAAL,CAAc,GAAG,WAAW,MAAM,WAChC,SAAAD,EAAmB,IAAKE,MACvB,OAAC,OAAK,SAAS,KAAd,CAAmB,MAAOA,EAAU,MAAOA,EAAU,CACvD,EACH,CAEJ,KACE,UACE,OAAC,OAAK,YAAL,CACC,MAAM,WACN,KAAK,8HACP,CAGN,EAEA,SACE,QAAC,QACC,WACE,OAAC,eACC,mBAAC,SAAO,WAAP,CAAkB,MAAM,gBAAgB,SAAUX,EAAe,EACpE,EAGF,oBAAC,OAAK,UAAL,CAAe,GAAG,SAAS,MAAM,SAAS,UAAS,GAAC,KACrD,OAACQ,EAAA,EAAc,KACf,OAAC,OAAK,UAAL,CAAe,GAAG,WAAW,MAAM,qBAAqB,YAAY,gCAAgC,KACrG,OAAC,OAAK,SAAL,CAAc,GAAG,QAAQ,MAAM,QAAQ,GAC1C,CAEJ",
  "names": ["session_start_new_form_exports", "__export", "Command", "__toCommonJS", "import_api", "import_api", "isSessionInstalled", "applications", "userApplications", "bundleIds", "bundleId", "SessionInstallationCheck", "options", "toast", "import_jsx_runtime", "submitSession", "values", "SessionInstallationCheck", "urlScheme", "queryString", "url", "Command", "preferences", "CategoryField", "categoryListParsed", "d", "category"]
}
